/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 .\gaming_room_target.glb 
*/

import React, { useEffect, useRef } from "react";
import { Html, useGLTF } from "@react-three/drei";
import gsap from "gsap";
import { useUiStore } from "../../store/UiStore";
import { useNavigate } from "react-router";
import { MeshBasicMaterial, MeshStandardMaterial } from "three";
import ClickHint from "../hints/ClickHint/ClickHint";
import { useExperienceStore } from "../../store/ExperienceStore";
import { useRoomStore } from "../../store/roomStore";
export function DarkRoomTarget(props) {
  const { nodes, materials } = useGLTF(
    "/models/Dark_Room/Dark_Room_Target.glb"
  );
  const { openPanel } = useUiStore();
  const navigate = useNavigate();
  const aboutAnimRef = useRef();
  const servicesAnimRef = useRef();
  const clickAnimRefs = useRef([]);
  const { isExperienceReady,isModelVisible,isFirstTimeOnDarkPage,setIsFirstTimeOnDarkPage } = useExperienceStore();
    const {roomType}=useRoomStore();

  const animationPairs = {
    about: { ref: aboutAnimRef, scale: { x: -0.02, y: -0.02, z: -0.02 } },
    services: {
      ref: servicesAnimRef,
      scale: { x: -0.01, y: -0.02, z: -0.016 },
    },
  };
  const hover = (typeAnim, isHovered) => {
    const { ref, scale } = animationPairs[typeAnim];
    gsap.to(ref.current.scale, {
      duration: 0.5,
      x: isHovered ? scale.x : 0,
      y: isHovered ? scale.y : 0,
      z: isHovered ? scale.z : 0,
    });
  };
  useEffect(() => {
    // čekaj da refovi budu mountovani
    if(!isModelVisible || !isFirstTimeOnDarkPage || roomType!=='DarkRoom') return
    console.log('radim')
    const refs = clickAnimRefs.current.filter(Boolean);
    if (refs.length > 0) {
      console.log("Refs:", refs);

      // npr. gsap animacija od 0 do 100
      gsap.fromTo(
        refs.map((ref) => ref.children[0]), // targeting the <div> inside <Html>
        { opacity: 1 },
        { opacity: 0, duration: 1, stagger: 0.2,delay:0.5,onComplete:()=>{
          setIsFirstTimeOnDarkPage()
        } },
        
      );
    }
  }, [isModelVisible,roomType,isFirstTimeOnDarkPage]);
  return (
    <>
      <Html
        position={[-2.355, 2.108, 1.227]}
        ref={(el) => (clickAnimRefs.current[0] = el)}
      >
        <div style={{ color: "white" }}>Click</div>
      </Html>

      <Html
        position={[0.934, 2.108, -3.124]}
        ref={(el) => (clickAnimRefs.current[1] = el)}
      >
        <div style={{ color: "white" }}>Click</div>
      </Html>

      <group {...props} dispose={null}>
        <mesh
          visible={false}
          onPointerOver={() => hover("about", true)}
          onPointerOut={() => hover("about", false)}
          onClick={() => {
            navigate("about");
          }}
          geometry={nodes.BoundryBox.geometry}
          material={new MeshBasicMaterial({ color: "white" })}
          position={[-2.355, 2.108, 1.226]}
        />

        <mesh
          ref={aboutAnimRef}
          geometry={nodes.BoundyBox_toHover.geometry}
          material={new MeshBasicMaterial({ color: "white" })}
          position={[-2.355, 2.108, 1.227]}
          scale={0}
        />
        <mesh
          ref={servicesAnimRef}
          geometry={nodes.BoundyBox_toHover001.geometry}
          material={new MeshBasicMaterial({ color: "white" })}
          position={[0.934, 2.108, -3.124]}
          rotation={[0, Math.PI / 2, 0]}
          scale={0}
        />
        <mesh
          visible={false}
          onPointerOver={() => hover("services", true)}
          onPointerOut={() => hover("services", false)}
          onClick={() => {
            navigate("services");
          }}
          geometry={nodes.BoundryBox001.geometry}
          material={new MeshBasicMaterial({ color: "white" })}
          position={[0.934, 2.108, -3.124]}
          rotation={[0, Math.PI / 2, 0]}
        />
      </group>
    </>
  );
}

useGLTF.preload("/models/Dark_Room/Dark_Room_Target.glb");
